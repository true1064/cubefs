// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cubefs/cubefs/apinode/crypto (interfaces: Cryptor)

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCryptor is a mock of Cryptor interface.
type MockCryptor struct {
	ctrl     *gomock.Controller
	recorder *MockCryptorMockRecorder
}

// MockCryptorMockRecorder is the mock recorder for MockCryptor.
type MockCryptorMockRecorder struct {
	mock *MockCryptor
}

// NewMockCryptor creates a new mock instance.
func NewMockCryptor(ctrl *gomock.Controller) *MockCryptor {
	mock := &MockCryptor{ctrl: ctrl}
	mock.recorder = &MockCryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptor) EXPECT() *MockCryptorMockRecorder {
	return m.recorder
}

// FileDecryptor mocks base method.
func (m *MockCryptor) FileDecryptor(arg0 []byte, arg1 io.Reader) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileDecryptor", arg0, arg1)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileDecryptor indicates an expected call of FileDecryptor.
func (mr *MockCryptorMockRecorder) FileDecryptor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileDecryptor", reflect.TypeOf((*MockCryptor)(nil).FileDecryptor), arg0, arg1)
}

// FileEncryptor mocks base method.
func (m *MockCryptor) FileEncryptor(arg0 []byte, arg1 io.Reader) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileEncryptor", arg0, arg1)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileEncryptor indicates an expected call of FileEncryptor.
func (mr *MockCryptorMockRecorder) FileEncryptor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileEncryptor", reflect.TypeOf((*MockCryptor)(nil).FileEncryptor), arg0, arg1)
}

// GenKey mocks base method.
func (m *MockCryptor) GenKey() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenKey")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenKey indicates an expected call of GenKey.
func (mr *MockCryptorMockRecorder) GenKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenKey", reflect.TypeOf((*MockCryptor)(nil).GenKey))
}

// TransDecryptor mocks base method.
func (m *MockCryptor) TransDecryptor(arg0 string, arg1 io.Reader) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransDecryptor", arg0, arg1)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransDecryptor indicates an expected call of TransDecryptor.
func (mr *MockCryptorMockRecorder) TransDecryptor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransDecryptor", reflect.TypeOf((*MockCryptor)(nil).TransDecryptor), arg0, arg1)
}

// TransEncryptor mocks base method.
func (m *MockCryptor) TransEncryptor(arg0 string, arg1 io.Reader) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransEncryptor", arg0, arg1)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransEncryptor indicates an expected call of TransEncryptor.
func (mr *MockCryptorMockRecorder) TransEncryptor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransEncryptor", reflect.TypeOf((*MockCryptor)(nil).TransEncryptor), arg0, arg1)
}
